//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TodoWCF.TodoWCFService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TodoItem", Namespace="http://schemas.datacontract.org/2004/07/TodoServices.Models")]
    public partial class TodoItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool DoneField;
        
        private string IDField;
        
        private string NameField;
        
        private string NotesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Done {
            get {
                return this.DoneField;
            }
            set {
                if ((this.DoneField.Equals(value) != true)) {
                    this.DoneField = value;
                    this.RaisePropertyChanged("Done");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodoWCFService.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITodoService/GetTodoItems", ReplyAction="http://tempuri.org/ITodoService/GetTodoItemsResponse")]
        System.IAsyncResult BeginGetTodoItems(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> EndGetTodoItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITodoService/CreateTodoItem", ReplyAction="http://tempuri.org/ITodoService/CreateTodoItemResponse")]
        System.IAsyncResult BeginCreateTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState);
        
        void EndCreateTodoItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITodoService/EditTodoItem", ReplyAction="http://tempuri.org/ITodoService/EditTodoItemResponse")]
        System.IAsyncResult BeginEditTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState);
        
        void EndEditTodoItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ITodoService/DeleteTodoItem", ReplyAction="http://tempuri.org/ITodoService/DeleteTodoItemResponse")]
        System.IAsyncResult BeginDeleteTodoItem(string id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteTodoItem(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : TodoWCF.TodoWCFService.ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTodoItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTodoItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<TodoWCF.TodoWCFService.ITodoService>, TodoWCF.TodoWCFService.ITodoService {
        
        private BeginOperationDelegate onBeginGetTodoItemsDelegate;
        
        private EndOperationDelegate onEndGetTodoItemsDelegate;
        
        private System.Threading.SendOrPostCallback onGetTodoItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateTodoItemDelegate;
        
        private EndOperationDelegate onEndCreateTodoItemDelegate;
        
        private System.Threading.SendOrPostCallback onCreateTodoItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditTodoItemDelegate;
        
        private EndOperationDelegate onEndEditTodoItemDelegate;
        
        private System.Threading.SendOrPostCallback onEditTodoItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTodoItemDelegate;
        
        private EndOperationDelegate onEndDeleteTodoItemDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTodoItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public TodoServiceClient() : 
                base(TodoServiceClient.GetDefaultBinding(), TodoServiceClient.GetDefaultEndpointAddress()) {
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), TodoServiceClient.GetEndpointAddress(endpointConfiguration)) {
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
        }
        
        public TodoServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TodoServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetTodoItemsCompletedEventArgs> GetTodoItemsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateTodoItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> EditTodoItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteTodoItemCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TodoWCF.TodoWCFService.ITodoService.BeginGetTodoItems(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTodoItems(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> TodoWCF.TodoWCFService.ITodoService.EndGetTodoItems(System.IAsyncResult result) {
            return base.Channel.EndGetTodoItems(result);
        }
        
        private System.IAsyncResult OnBeginGetTodoItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((TodoWCF.TodoWCFService.ITodoService)(this)).BeginGetTodoItems(callback, asyncState);
        }
        
        private object[] OnEndGetTodoItems(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> retVal = ((TodoWCF.TodoWCFService.ITodoService)(this)).EndGetTodoItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTodoItemsCompleted(object state) {
            if ((this.GetTodoItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTodoItemsCompleted(this, new GetTodoItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTodoItemsAsync() {
            this.GetTodoItemsAsync(null);
        }
        
        public void GetTodoItemsAsync(object userState) {
            if ((this.onBeginGetTodoItemsDelegate == null)) {
                this.onBeginGetTodoItemsDelegate = new BeginOperationDelegate(this.OnBeginGetTodoItems);
            }
            if ((this.onEndGetTodoItemsDelegate == null)) {
                this.onEndGetTodoItemsDelegate = new EndOperationDelegate(this.OnEndGetTodoItems);
            }
            if ((this.onGetTodoItemsCompletedDelegate == null)) {
                this.onGetTodoItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTodoItemsCompleted);
            }
            base.InvokeAsync(this.onBeginGetTodoItemsDelegate, null, this.onEndGetTodoItemsDelegate, this.onGetTodoItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TodoWCF.TodoWCFService.ITodoService.BeginCreateTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateTodoItem(item, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TodoWCF.TodoWCFService.ITodoService.EndCreateTodoItem(System.IAsyncResult result) {
            base.Channel.EndCreateTodoItem(result);
        }
        
        private System.IAsyncResult OnBeginCreateTodoItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TodoWCF.TodoWCFService.TodoItem item = ((TodoWCF.TodoWCFService.TodoItem)(inValues[0]));
            return ((TodoWCF.TodoWCFService.ITodoService)(this)).BeginCreateTodoItem(item, callback, asyncState);
        }
        
        private object[] OnEndCreateTodoItem(System.IAsyncResult result) {
            ((TodoWCF.TodoWCFService.ITodoService)(this)).EndCreateTodoItem(result);
            return null;
        }
        
        private void OnCreateTodoItemCompleted(object state) {
            if ((this.CreateTodoItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateTodoItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateTodoItemAsync(TodoWCF.TodoWCFService.TodoItem item) {
            this.CreateTodoItemAsync(item, null);
        }
        
        public void CreateTodoItemAsync(TodoWCF.TodoWCFService.TodoItem item, object userState) {
            if ((this.onBeginCreateTodoItemDelegate == null)) {
                this.onBeginCreateTodoItemDelegate = new BeginOperationDelegate(this.OnBeginCreateTodoItem);
            }
            if ((this.onEndCreateTodoItemDelegate == null)) {
                this.onEndCreateTodoItemDelegate = new EndOperationDelegate(this.OnEndCreateTodoItem);
            }
            if ((this.onCreateTodoItemCompletedDelegate == null)) {
                this.onCreateTodoItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateTodoItemCompleted);
            }
            base.InvokeAsync(this.onBeginCreateTodoItemDelegate, new object[] {
                        item}, this.onEndCreateTodoItemDelegate, this.onCreateTodoItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TodoWCF.TodoWCFService.ITodoService.BeginEditTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditTodoItem(item, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TodoWCF.TodoWCFService.ITodoService.EndEditTodoItem(System.IAsyncResult result) {
            base.Channel.EndEditTodoItem(result);
        }
        
        private System.IAsyncResult OnBeginEditTodoItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            TodoWCF.TodoWCFService.TodoItem item = ((TodoWCF.TodoWCFService.TodoItem)(inValues[0]));
            return ((TodoWCF.TodoWCFService.ITodoService)(this)).BeginEditTodoItem(item, callback, asyncState);
        }
        
        private object[] OnEndEditTodoItem(System.IAsyncResult result) {
            ((TodoWCF.TodoWCFService.ITodoService)(this)).EndEditTodoItem(result);
            return null;
        }
        
        private void OnEditTodoItemCompleted(object state) {
            if ((this.EditTodoItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditTodoItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditTodoItemAsync(TodoWCF.TodoWCFService.TodoItem item) {
            this.EditTodoItemAsync(item, null);
        }
        
        public void EditTodoItemAsync(TodoWCF.TodoWCFService.TodoItem item, object userState) {
            if ((this.onBeginEditTodoItemDelegate == null)) {
                this.onBeginEditTodoItemDelegate = new BeginOperationDelegate(this.OnBeginEditTodoItem);
            }
            if ((this.onEndEditTodoItemDelegate == null)) {
                this.onEndEditTodoItemDelegate = new EndOperationDelegate(this.OnEndEditTodoItem);
            }
            if ((this.onEditTodoItemCompletedDelegate == null)) {
                this.onEditTodoItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditTodoItemCompleted);
            }
            base.InvokeAsync(this.onBeginEditTodoItemDelegate, new object[] {
                        item}, this.onEndEditTodoItemDelegate, this.onEditTodoItemCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TodoWCF.TodoWCFService.ITodoService.BeginDeleteTodoItem(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTodoItem(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TodoWCF.TodoWCFService.ITodoService.EndDeleteTodoItem(System.IAsyncResult result) {
            base.Channel.EndDeleteTodoItem(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTodoItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((TodoWCF.TodoWCFService.ITodoService)(this)).BeginDeleteTodoItem(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteTodoItem(System.IAsyncResult result) {
            ((TodoWCF.TodoWCFService.ITodoService)(this)).EndDeleteTodoItem(result);
            return null;
        }
        
        private void OnDeleteTodoItemCompleted(object state) {
            if ((this.DeleteTodoItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTodoItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTodoItemAsync(string id) {
            this.DeleteTodoItemAsync(id, null);
        }
        
        public void DeleteTodoItemAsync(string id, object userState) {
            if ((this.onBeginDeleteTodoItemDelegate == null)) {
                this.onBeginDeleteTodoItemDelegate = new BeginOperationDelegate(this.OnBeginDeleteTodoItem);
            }
            if ((this.onEndDeleteTodoItemDelegate == null)) {
                this.onEndDeleteTodoItemDelegate = new EndOperationDelegate(this.OnEndDeleteTodoItem);
            }
            if ((this.onDeleteTodoItemCompletedDelegate == null)) {
                this.onDeleteTodoItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTodoItemCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTodoItemDelegate, new object[] {
                        id}, this.onEndDeleteTodoItemDelegate, this.onDeleteTodoItemCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TodoWCF.TodoWCFService.ITodoService CreateChannel() {
            return new TodoServiceClientChannel(this);
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITodoService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITodoService)) {
                return new System.ServiceModel.EndpointAddress("http://developer.xamarin.com:8081/TodoService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TodoServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITodoService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TodoServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITodoService);
        }
        
        private class TodoServiceClientChannel : ChannelBase<TodoWCF.TodoWCFService.ITodoService>, TodoWCF.TodoWCFService.ITodoService {
            
            public TodoServiceClientChannel(System.ServiceModel.ClientBase<TodoWCF.TodoWCFService.ITodoService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetTodoItems(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetTodoItems", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> EndGetTodoItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem> _result = ((System.Collections.ObjectModel.ObservableCollection<TodoWCF.TodoWCFService.TodoItem>)(base.EndInvoke("GetTodoItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = item;
                System.IAsyncResult _result = base.BeginInvoke("CreateTodoItem", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateTodoItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateTodoItem", _args, result);
            }
            
            public System.IAsyncResult BeginEditTodoItem(TodoWCF.TodoWCFService.TodoItem item, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = item;
                System.IAsyncResult _result = base.BeginInvoke("EditTodoItem", _args, callback, asyncState);
                return _result;
            }
            
            public void EndEditTodoItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("EditTodoItem", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteTodoItem(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTodoItem", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteTodoItem(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteTodoItem", _args, result);
            }
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITodoService,
        }
    }
}
